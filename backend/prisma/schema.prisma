// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("STUDENT") // Changed from enum to string for SQLite compatibility
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  studentProfile StudentProfile?
  teacherProfile TeacherProfile?
  adminProfile   AdminProfile?

  @@map("users")
}

model StudentProfile {
  id          String   @id @default(cuid())
  studentId   String   @unique
  grade       String
  section     String
  userId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollments Enrollment[]
  attendances Attendance[]

  @@map("student_profiles")
}

model TeacherProfile {
  id        String   @id @default(cuid())
  subject   String
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  classes   Class[]

  @@map("teacher_profiles")
}

model AdminProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admin_profiles")
}

model Class {
  id          String   @id @default(cuid())
  name        String
  subject     String
  grade       String
  section     String
  teacherId   String
  schedule    String   // JSON string for schedule
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teacher     TeacherProfile @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  enrollments Enrollment[]
  attendances Attendance[]
  qrCodes     QRCode[]       // Added missing relation

  @@map("classes")
}

model Enrollment {
  id        String   @id @default(cuid())
  studentId String
  classId   String
  createdAt DateTime @default(now())

  // Relations
  student StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class   Class         @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([studentId, classId])
  @@map("enrollments")
}

model Attendance {
  id        String   @id @default(cuid())
  studentId String
  classId   String
  date      DateTime
  status    String   @default("PRESENT") // Changed from enum to string for SQLite compatibility
  qrCode    String?          // QR code identifier
  createdAt DateTime @default(now())

  // Relations
  student StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class   Class         @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([studentId, classId, date])
  @@map("attendances")
}

model QRCode {
  id        String   @id @default(cuid())
  classId   String
  code      String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  class Class @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@map("qr_codes")
}

// Note: Enums are not supported in SQLite, so we use strings instead
// Role values: "STUDENT", "TEACHER", "ADMIN"
// AttendanceStatus values: "PRESENT", "ABSENT", "LATE", "EXCUSED"
